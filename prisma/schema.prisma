// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}



// =============================
// ENUMS
// =============================
enum UserRole {
  admin
  rider
  driver
}

enum DriverApproval {
  pending
  approved
  suspended
  rejected
}

enum RideStatus {
  requested
  accepted
  driver_enroute
  picked_up
  in_transit
  completed
  cancelled
  no_driver
}

enum PaymentStatus {
  pending
  paid
  failed
  refunded
}

// =============================
// MODELS
// =============================

// User identity (common for all roles)
model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  fullName     String?
  phone        String?  @unique
  role         UserRole @default(rider)
  isBlocked    Boolean  @default(false)

  riderProfile  Rider?
  driverProfile Driver?

  ridesAsRider  Ride[]   @relation("RidesAsRider")
  ridesAsDriver Ride[]   @relation("RidesAsDriver")
  ratingsGiven  RideRating[] @relation("RatingsGiven")
  ratingsGot    RideRating[] @relation("RatingsReceived")

  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  AdminAction AdminAction[]

  DriverLocationUpdate DriverLocationUpdate[]

  Payment Payment[]
}

// Rider-specific profile
model Rider {
  id                     String   @id @default(uuid())
  userId                 String   @unique
  user                   User     @relation(fields: [userId], references: [id])
  defaultPaymentMethodId String?  // optional future integration

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Driver-specific profile
model Driver {
  id               String          @id @default(uuid())
  userId           String          @unique
  user             User            @relation(fields: [userId], references: [id])
  approvalStatus   DriverApproval  @default(pending)
  vehicleId        String?
  vehicle          Vehicle?        @relation(fields: [vehicleId], references: [id])
  vehicleLicense   String?
  driverRating     Float?          @default(0.0)
  totalEarnings    Float?          @default(0.0)
  onRide           Boolean         @default(false)
  online           Boolean         @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Vehicle (optional but useful)
model Vehicle {
  id        String  @id @default(uuid())
  make      String?
  model     String?
  color     String?
  year      Int?
  plate     String? @unique

  drivers   Driver[]

  createdAt DateTime @default(now())
}

// Ride locations (pickup/dropoff)
model Location {
  id        String   @id @default(uuid())
  name      String?
  address   String?
  latitude  Float
  longitude Float

  ridesPickup  Ride[] @relation("PickupLocation")
  ridesDropoff Ride[] @relation("DropoffLocation")

  createdAt DateTime @default(now())
}

// Main Ride table
model Ride {
  id        String     @id @default(uuid())

  riderId   String
  rider     User       @relation("RidesAsRider", fields: [riderId], references: [id])

  driverId  String?
  driver    User?      @relation("RidesAsDriver", fields: [driverId], references: [id])

  pickupLocationId  String
  pickupLocation    Location @relation("PickupLocation", fields: [pickupLocationId], references: [id])

  dropoffLocationId String
  dropoffLocation   Location @relation("DropoffLocation", fields: [dropoffLocationId], references: [id])

  pickupAddress   String?
  dropoffAddress  String?

  requestedAt DateTime @default(now())
  acceptedAt  DateTime?
  startedAt   DateTime?
  completedAt DateTime?
  cancelledAt DateTime?

  status RideStatus @default(requested)

  distanceMeters   Int?
  durationSeconds  Int?
  fareTotal        Float? @default(0.0)
  platformFee      Float? @default(0.0)
  driverEarning    Float? @default(0.0)
  promoCode        String?
  notes            String?

  statusHistory    RideStatusHistory[]
  cancellation     RideCancellation?
  payments         Payment[]
  ratings          RideRating[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Audit history of ride status changes
model RideStatusHistory {
  id       String     @id @default(uuid())
  rideId   String
  ride     Ride       @relation(fields: [rideId], references: [id])
  status   RideStatus
  changedBy String?   // user id
  note     String?

  createdAt DateTime @default(now())
}

// Cancellations
model RideCancellation {
  id          String   @id @default(uuid())
  rideId      String   @unique
  ride        Ride     @relation(fields: [rideId], references: [id])
  cancelledBy String
  reason      String?
  refundable  Boolean  @default(true)

  cancelledAt DateTime @default(now())
}

// Payments
model Payment {
  id        String        @id @default(uuid())
  rideId    String?
  ride      Ride?         @relation(fields: [rideId], references: [id])
  userId    String?
  user      User?         @relation(fields: [userId], references: [id])
  amount    Float
  currency  String        @default("BDT")
  status    PaymentStatus @default(pending)
  providerPaymentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Ratings
model RideRating {
  id            String @id @default(uuid())
  rideId        String
  ride          Ride   @relation(fields: [rideId], references: [id])
  raterId       String
  rater         User   @relation("RatingsGiven", fields: [raterId], references: [id])
  ratedUserId   String
  ratedUser     User   @relation("RatingsReceived", fields: [ratedUserId], references: [id])
  rating        Int
  comment       String?

  createdAt DateTime @default(now())
}

// Admin actions / audit
model AdminAction {
  id            String  @id @default(uuid())
  adminId       String
  admin         User    @relation(fields: [adminId], references: [id])
  targetUserId  String?
  action        String
  details       Json?

  createdAt DateTime @default(now())
}

// Driver live location updates
model DriverLocationUpdate {
  id        String  @id @default(uuid())
  driverId  String
  driver    User    @relation(fields: [driverId], references: [id])
  latitude  Float
  longitude Float
  heading   Float?
  speed     Float?

  updatedAt DateTime @default(now())
}